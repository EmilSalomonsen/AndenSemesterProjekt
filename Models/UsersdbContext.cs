// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;

#nullable disable

namespace AndenSemesterProjekt.Models
{
    public partial class UsersdbContext : DbContext
    {
        public UsersdbContext()
        {
        }

        public UsersdbContext(DbContextOptions<UsersdbContext> options)
            : base(options)
        {
        }

        public virtual DbSet<Attendant> Attendants { get; set; }
        public virtual DbSet<Driver> Drivers { get; set; }
        public virtual DbSet<PickupPoint> PickupPoints { get; set; }
        public virtual DbSet<Route> Routes { get; set; }
        public virtual DbSet<User> Users { get; set; }

        protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        {
            if (!optionsBuilder.IsConfigured)
            {
//#warning To protect potentially sensitive information in your connection string, you should move it out of source code. You can avoid scaffolding the connection string by using the Name= syntax to read it from configuration - see https://go.microsoft.com/fwlink/?linkid=2131148. For more guidance on storing connection strings, see http://go.microsoft.com/fwlink/?LinkId=723263.
                optionsBuilder.UseSqlServer("Data Source=(localdb)\\MSSQLLocalDB;Initial Catalog=UsersDB;Integrated Security=True");
            }
        }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.HasAnnotation("Relational:Collation", "SQL_Latin1_General_CP1_CI_AS");

            modelBuilder.Entity<Attendant>(entity =>
            {
                entity.Property(e => e.AttendantId).IsFixedLength(true);
            });

            modelBuilder.Entity<Driver>(entity =>
            {
                entity.Property(e => e.DriverId).IsFixedLength(true);
            });

            modelBuilder.Entity<PickupPoint>(entity =>
            {
                entity.Property(e => e.PickupPointId).IsFixedLength(true);

                entity.Property(e => e.Adress).IsFixedLength(true);

                entity.Property(e => e.PickupTime).IsFixedLength(true);
            });

            modelBuilder.Entity<Route>(entity =>
            {
                entity.Property(e => e.RouteId).IsFixedLength(true);

                entity.Property(e => e.AttendantId).IsFixedLength(true);

                entity.Property(e => e.DriverId).IsFixedLength(true);

                entity.Property(e => e.EndAdress).IsFixedLength(true);

                entity.Property(e => e.PickupPoints).IsFixedLength(true);

                entity.Property(e => e.StartAdress).IsFixedLength(true);

                entity.HasOne(d => d.Attendant)
                    .WithMany(p => p.Routes)
                    .HasForeignKey(d => d.AttendantId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__Routes__Attendan__2C3393D0");

                entity.HasOne(d => d.Driver)
                    .WithMany(p => p.Routes)
                    .HasForeignKey(d => d.DriverId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__Routes__DriverID__2B3F6F97");
            });

            modelBuilder.Entity<User>(entity =>
            {
                entity.Property(e => e.UserId).IsFixedLength(true);

                entity.Property(e => e.Name).IsFixedLength(true);
            });

            OnModelCreatingPartial(modelBuilder);
        }

        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
    }
}